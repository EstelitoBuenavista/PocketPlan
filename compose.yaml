# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      - server
    environment:
      - NEXT_PUBLIC_API_URL=http://server:4000

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - ./server:/app
      - /app/node_modules
    ports:
      - '4000:4000'
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=3306
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=pass
      - DB_NAME=pocketplan_db
    command: npm start

  db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_DATABASE: pocketplan_db
    ports:
      - '3306:3306'
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  db-data:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
  
#   db:
#     image: mysql:latest
#     restart: always
#     user: sql
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5

# secrets:
#   db-password:
#     file: db/password.txt

#   mysql:
#     image: mysql:latest
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: root_password
#       MYSQL_DATABASE: budget_tracker_db
#       MYSQL_USER: user
#       MYSQL_PASSWORD: user_password
#     ports:
#       - '3306:3306'
#     volumes:
#       - mysql_data:/var/lib/mysql
#     networks:
#       - app-network


# networks:
#   app-network:

# volumes:
#   mysql_data: